/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZIPCode model module.
 * @module GeoCodes/model/ZIPCode
 * @version 1.0.0-alpha
 */
class ZIPCode {
    /**
     * Constructs a new <code>ZIPCode</code>.
     * @alias module:GeoCodes/model/ZIPCode
     * @param zip {Number} The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     */
    constructor(zip) { 
        
        ZIPCode.initialize(this, zip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, zip) { 
        obj['zip'] = zip;
    }

    /**
     * Constructs a <code>ZIPCode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GeoCodes/model/ZIPCode} obj Optional instance to populate.
     * @return {module:GeoCodes/model/ZIPCode} The populated <code>ZIPCode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZIPCode();

            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('plus_four')) {
                obj['plus_four'] = ApiClient.convertToType(data['plus_four'], 'Number');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'Number');
            }
        }
        return obj;
    }

/**
     * Returns A string with the formatted version of the ZIP code. This may include the +4 extension if available.
     * @return {String}
     */
    getFormatted() {
        return this.formatted;
    }

    /**
     * Sets A string with the formatted version of the ZIP code. This may include the +4 extension if available.
     * @param {String} formatted A string with the formatted version of the ZIP code. This may include the +4 extension if available.
     */
    setFormatted(formatted) {
        this['formatted'] = formatted;
    }
/**
     * Returns The optional plus-four code, if available. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     * @return {Number}
     */
    getPlusFour() {
        return this.plus_four;
    }

    /**
     * Sets The optional plus-four code, if available. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     * @param {Number} plusFour The optional plus-four code, if available. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     */
    setPlusFour(plusFour) {
        this['plus_four'] = plusFour;
    }
/**
     * Returns The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     * @return {Number}
     */
    getZip() {
        return this.zip;
    }

    /**
     * Sets The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     * @param {Number} zip The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
     */
    setZip(zip) {
        this['zip'] = zip;
    }

}

/**
 * A string with the formatted version of the ZIP code. This may include the +4 extension if available.
 * @member {String} formatted
 */
ZIPCode.prototype['formatted'] = undefined;

/**
 * The optional plus-four code, if available. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
 * @member {Number} plus_four
 */
ZIPCode.prototype['plus_four'] = undefined;

/**
 * The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
 * @member {Number} zip
 */
ZIPCode.prototype['zip'] = undefined;






export default ZIPCode;

