/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GCSCoordinate from './GCSCoordinate';
import USAddress from './USAddress';

/**
 * The Geocoding model module.
 * @module GeoCodes/model/Geocoding
 * @version 1.0.0-alpha
 */
class Geocoding {
    /**
     * Constructs a new <code>Geocoding</code>.
     * @alias module:GeoCodes/model/Geocoding
     * @param confidence {Number} The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
     * @param datasetCitationRequired {Boolean} Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
     * @param matchedAddress {module:GeoCodes/model/USAddress} 
     * @param resultDataset {String} The dataset that the result was derived from.
     * @param resultLocation {String} The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
     * @param resultType {String} Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
     */
    constructor(confidence, datasetCitationRequired, matchedAddress, resultDataset, resultLocation, resultType) { 
        
        Geocoding.initialize(this, confidence, datasetCitationRequired, matchedAddress, resultDataset, resultLocation, resultType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confidence, datasetCitationRequired, matchedAddress, resultDataset, resultLocation, resultType) { 
        obj['confidence'] = confidence;
        obj['dataset_citation_required'] = datasetCitationRequired;
        obj['matched_address'] = matchedAddress;
        obj['result_dataset'] = resultDataset;
        obj['result_location'] = resultLocation;
        obj['result_type'] = resultType;
    }

    /**
     * Constructs a <code>Geocoding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GeoCodes/model/Geocoding} obj Optional instance to populate.
     * @return {module:GeoCodes/model/Geocoding} The populated <code>Geocoding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Geocoding();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('coordinate')) {
                obj['coordinate'] = GCSCoordinate.constructFromObject(data['coordinate']);
            }
            if (data.hasOwnProperty('dataset_citation_required')) {
                obj['dataset_citation_required'] = ApiClient.convertToType(data['dataset_citation_required'], 'Boolean');
            }
            if (data.hasOwnProperty('matched_address')) {
                obj['matched_address'] = USAddress.constructFromObject(data['matched_address']);
            }
            if (data.hasOwnProperty('result_dataset')) {
                obj['result_dataset'] = ApiClient.convertToType(data['result_dataset'], 'String');
            }
            if (data.hasOwnProperty('result_location')) {
                obj['result_location'] = ApiClient.convertToType(data['result_location'], 'String');
            }
            if (data.hasOwnProperty('result_type')) {
                obj['result_type'] = ApiClient.convertToType(data['result_type'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
     * minimum: 0
     * maximum: 100
     * @return {Number}
     */
    getConfidence() {
        return this.confidence;
    }

    /**
     * Sets The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
     * @param {Number} confidence The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
     */
    setConfidence(confidence) {
        this['confidence'] = confidence;
    }
/**
     * @return {module:GeoCodes/model/GCSCoordinate}
     */
    getCoordinate() {
        return this.coordinate;
    }

    /**
     * @param {module:GeoCodes/model/GCSCoordinate} coordinate
     */
    setCoordinate(coordinate) {
        this['coordinate'] = coordinate;
    }
/**
     * Returns Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
     * @return {Boolean}
     */
    getDatasetCitationRequired() {
        return this.dataset_citation_required;
    }

    /**
     * Sets Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
     * @param {Boolean} datasetCitationRequired Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
     */
    setDatasetCitationRequired(datasetCitationRequired) {
        this['dataset_citation_required'] = datasetCitationRequired;
    }
/**
     * @return {module:GeoCodes/model/USAddress}
     */
    getMatchedAddress() {
        return this.matched_address;
    }

    /**
     * @param {module:GeoCodes/model/USAddress} matchedAddress
     */
    setMatchedAddress(matchedAddress) {
        this['matched_address'] = matchedAddress;
    }
/**
     * Returns The dataset that the result was derived from.
     * @return {String}
     */
    getResultDataset() {
        return this.result_dataset;
    }

    /**
     * Sets The dataset that the result was derived from.
     * @param {String} resultDataset The dataset that the result was derived from.
     */
    setResultDataset(resultDataset) {
        this['result_dataset'] = resultDataset;
    }
/**
     * Returns The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
     * @return {String}
     */
    getResultLocation() {
        return this.result_location;
    }

    /**
     * Sets The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
     * @param {String} resultLocation The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
     */
    setResultLocation(resultLocation) {
        this['result_location'] = resultLocation;
    }
/**
     * Returns Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
     * @return {String}
     */
    getResultType() {
        return this.result_type;
    }

    /**
     * Sets Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
     * @param {String} resultType Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
     */
    setResultType(resultType) {
        this['result_type'] = resultType;
    }

}

/**
 * The confidence that the address was correctly geocoded. Range 0-100. 100 was an exact record match, 0 is a wild guess.
 * @member {Number} confidence
 */
Geocoding.prototype['confidence'] = undefined;

/**
 * @member {module:GeoCodes/model/GCSCoordinate} coordinate
 */
Geocoding.prototype['coordinate'] = undefined;

/**
 * Whether the original data source requires citation via their license terms. This is not used at the moment, but will be in the future.
 * @member {Boolean} dataset_citation_required
 */
Geocoding.prototype['dataset_citation_required'] = undefined;

/**
 * @member {module:GeoCodes/model/USAddress} matched_address
 */
Geocoding.prototype['matched_address'] = undefined;

/**
 * The dataset that the result was derived from.
 * @member {String} result_dataset
 */
Geocoding.prototype['result_dataset'] = undefined;

/**
 * The description of where the point is. At the moment, all of the points are offset from the road, but in the future this will additionally include rooftop and entrance locations.
 * @member {String} result_location
 */
Geocoding.prototype['result_location'] = undefined;

/**
 * Describes how the location was derived. All geocodings are interpolated at the moment, but in the future this will include direct lookups.
 * @member {String} result_type
 */
Geocoding.prototype['result_type'] = undefined;






export default Geocoding;

