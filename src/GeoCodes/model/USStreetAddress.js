/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The USStreetAddress model module.
 * @module GeoCodes/model/USStreetAddress
 * @version 1.0.0-alpha
 */
class USStreetAddress {
    /**
     * Constructs a new <code>USStreetAddress</code>.
     * @alias module:GeoCodes/model/USStreetAddress
     * @param formatted {String} The formatted version of the street address.
     * @param streetName {String} The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
     */
    constructor(formatted, streetName) { 
        
        USStreetAddress.initialize(this, formatted, streetName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, formatted, streetName) { 
        obj['formatted'] = formatted;
        obj['street_name'] = streetName;
    }

    /**
     * Constructs a <code>USStreetAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GeoCodes/model/USStreetAddress} obj Optional instance to populate.
     * @return {module:GeoCodes/model/USStreetAddress} The populated <code>USStreetAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USStreetAddress();

            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('postdirectional')) {
                obj['postdirectional'] = ApiClient.convertToType(data['postdirectional'], 'String');
            }
            if (data.hasOwnProperty('predirectional')) {
                obj['predirectional'] = ApiClient.convertToType(data['predirectional'], 'String');
            }
            if (data.hasOwnProperty('street_name')) {
                obj['street_name'] = ApiClient.convertToType(data['street_name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit_designator')) {
                obj['unit_designator'] = ApiClient.convertToType(data['unit_designator'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The formatted version of the street address.
     * @return {String}
     */
    getFormatted() {
        return this.formatted;
    }

    /**
     * Sets The formatted version of the street address.
     * @param {String} formatted The formatted version of the street address.
     */
    setFormatted(formatted) {
        this['formatted'] = formatted;
    }
/**
     * Returns The number of the street address. It is important that this is stored in a string. Many valid house numbers cannot be represented by just a number, in which case the alphanumeric_number field will be populated: Some fake examples include '1/2 Smith Street', '41-13 39th Place', 'E400N200 Pike Street'. Note that the alpha version of the API only includes numeric addresses, but our stable release will handle this\"
     * @return {String}
     */
    getNumber() {
        return this.number;
    }

    /**
     * Sets The number of the street address. It is important that this is stored in a string. Many valid house numbers cannot be represented by just a number, in which case the alphanumeric_number field will be populated: Some fake examples include '1/2 Smith Street', '41-13 39th Place', 'E400N200 Pike Street'. Note that the alpha version of the API only includes numeric addresses, but our stable release will handle this\"
     * @param {String} number The number of the street address. It is important that this is stored in a string. Many valid house numbers cannot be represented by just a number, in which case the alphanumeric_number field will be populated: Some fake examples include '1/2 Smith Street', '41-13 39th Place', 'E400N200 Pike Street'. Note that the alpha version of the API only includes numeric addresses, but our stable release will handle this\"
     */
    setNumber(number) {
        this['number'] = number;
    }
/**
     * Returns A directional (N, E, S, W, etc) that appears after the street name. For example, 'W' is the postdirectional in '1 Main Street W'.
     * @return {String}
     */
    getPostdirectional() {
        return this.postdirectional;
    }

    /**
     * Sets A directional (N, E, S, W, etc) that appears after the street name. For example, 'W' is the postdirectional in '1 Main Street W'.
     * @param {String} postdirectional A directional (N, E, S, W, etc) that appears after the street name. For example, 'W' is the postdirectional in '1 Main Street W'.
     */
    setPostdirectional(postdirectional) {
        this['postdirectional'] = postdirectional;
    }
/**
     * Returns A directional (N, E, S, W, etc) that appears before the street name. For example, 'E' is the predirectional in '1 E Main Street'.
     * @return {String}
     */
    getPredirectional() {
        return this.predirectional;
    }

    /**
     * Sets A directional (N, E, S, W, etc) that appears before the street name. For example, 'E' is the predirectional in '1 E Main Street'.
     * @param {String} predirectional A directional (N, E, S, W, etc) that appears before the street name. For example, 'E' is the predirectional in '1 E Main Street'.
     */
    setPredirectional(predirectional) {
        this['predirectional'] = predirectional;
    }
/**
     * Returns The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
     * @return {String}
     */
    getStreetName() {
        return this.street_name;
    }

    /**
     * Sets The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
     * @param {String} streetName The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
     */
    setStreetName(streetName) {
        this['street_name'] = streetName;
    }
/**
     * Returns The type of the street: Rd, St, Ave, etc. So the address '101 Main Street' would be 'St'. May be omitted for some roads. For example, 'Broadway' and 'The Embarcadero' are valid road names that do not have road types.
     * @return {String}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of the street: Rd, St, Ave, etc. So the address '101 Main Street' would be 'St'. May be omitted for some roads. For example, 'Broadway' and 'The Embarcadero' are valid road names that do not have road types.
     * @param {String} type The type of the street: Rd, St, Ave, etc. So the address '101 Main Street' would be 'St'. May be omitted for some roads. For example, 'Broadway' and 'The Embarcadero' are valid road names that do not have road types.
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns A unit designator in an address, if one is present. For example, 'Apt 3' is the unit designator in '1 Main Street Apt 3'. This may combine more than one designator into the same field: 'Building 2 Floor 1'.
     * @return {String}
     */
    getUnitDesignator() {
        return this.unit_designator;
    }

    /**
     * Sets A unit designator in an address, if one is present. For example, 'Apt 3' is the unit designator in '1 Main Street Apt 3'. This may combine more than one designator into the same field: 'Building 2 Floor 1'.
     * @param {String} unitDesignator A unit designator in an address, if one is present. For example, 'Apt 3' is the unit designator in '1 Main Street Apt 3'. This may combine more than one designator into the same field: 'Building 2 Floor 1'.
     */
    setUnitDesignator(unitDesignator) {
        this['unit_designator'] = unitDesignator;
    }

}

/**
 * The formatted version of the street address.
 * @member {String} formatted
 */
USStreetAddress.prototype['formatted'] = undefined;

/**
 * The number of the street address. It is important that this is stored in a string. Many valid house numbers cannot be represented by just a number, in which case the alphanumeric_number field will be populated: Some fake examples include '1/2 Smith Street', '41-13 39th Place', 'E400N200 Pike Street'. Note that the alpha version of the API only includes numeric addresses, but our stable release will handle this\"
 * @member {String} number
 */
USStreetAddress.prototype['number'] = undefined;

/**
 * A directional (N, E, S, W, etc) that appears after the street name. For example, 'W' is the postdirectional in '1 Main Street W'.
 * @member {String} postdirectional
 */
USStreetAddress.prototype['postdirectional'] = undefined;

/**
 * A directional (N, E, S, W, etc) that appears before the street name. For example, 'E' is the predirectional in '1 E Main Street'.
 * @member {String} predirectional
 */
USStreetAddress.prototype['predirectional'] = undefined;

/**
 * The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
 * @member {String} street_name
 */
USStreetAddress.prototype['street_name'] = undefined;

/**
 * The type of the street: Rd, St, Ave, etc. So the address '101 Main Street' would be 'St'. May be omitted for some roads. For example, 'Broadway' and 'The Embarcadero' are valid road names that do not have road types.
 * @member {String} type
 */
USStreetAddress.prototype['type'] = undefined;

/**
 * A unit designator in an address, if one is present. For example, 'Apt 3' is the unit designator in '1 Main Street Apt 3'. This may combine more than one designator into the same field: 'Building 2 Floor 1'.
 * @member {String} unit_designator
 */
USStreetAddress.prototype['unit_designator'] = undefined;






export default USStreetAddress;

