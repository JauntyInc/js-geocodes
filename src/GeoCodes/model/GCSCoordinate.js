/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GCSCoordinate model module.
 * @module GeoCodes/model/GCSCoordinate
 * @version 1.0.0-alpha
 */
class GCSCoordinate {
    /**
     * Constructs a new <code>GCSCoordinate</code>.
     * @alias module:GeoCodes/model/GCSCoordinate
     */
    constructor() { 
        
        GCSCoordinate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GCSCoordinate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GeoCodes/model/GCSCoordinate} obj Optional instance to populate.
     * @return {module:GeoCodes/model/GCSCoordinate} The populated <code>GCSCoordinate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GCSCoordinate();

            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
        }
        return obj;
    }

/**
     * Returns latitude specifies the North/South position of a coordinate, as measured from the equator.
     * minimum: -9E+1
     * maximum: 9E+1
     * @return {Number}
     */
    getLatitude() {
        return this.latitude;
    }

    /**
     * Sets latitude specifies the North/South position of a coordinate, as measured from the equator.
     * @param {Number} latitude latitude specifies the North/South position of a coordinate, as measured from the equator.
     */
    setLatitude(latitude) {
        this['latitude'] = latitude;
    }
/**
     * Returns longitude specifies the East/West position of a coordinate, as measured from the International Reference Meridian.
     * minimum: -1.8E+2
     * maximum: 1.8E+2
     * @return {Number}
     */
    getLongitude() {
        return this.longitude;
    }

    /**
     * Sets longitude specifies the East/West position of a coordinate, as measured from the International Reference Meridian.
     * @param {Number} longitude longitude specifies the East/West position of a coordinate, as measured from the International Reference Meridian.
     */
    setLongitude(longitude) {
        this['longitude'] = longitude;
    }

}

/**
 * latitude specifies the North/South position of a coordinate, as measured from the equator.
 * @member {Number} latitude
 */
GCSCoordinate.prototype['latitude'] = undefined;

/**
 * longitude specifies the East/West position of a coordinate, as measured from the International Reference Meridian.
 * @member {Number} longitude
 */
GCSCoordinate.prototype['longitude'] = undefined;






export default GCSCoordinate;

