/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import USStreetAddress from './USStreetAddress';
import ZIPCode from './ZIPCode';

/**
 * The USAddress model module.
 * @module GeoCodes/model/USAddress
 * @version 1.0.0-alpha
 */
class USAddress {
    /**
     * Constructs a new <code>USAddress</code>.
     * @alias module:GeoCodes/model/USAddress
     * @param city {String} The city of the address.
     * @param formatted {String} A fully-formatted version of the address.
     * @param stateCode {String} The 2-letter state code of the address. Note that in addition to the 50 states, you might also see 2 letter codes for American territories, or the District of Columbia.
     * @param streetAddress {module:GeoCodes/model/USStreetAddress} 
     * @param zipCode {module:GeoCodes/model/ZIPCode} 
     */
    constructor(city, formatted, stateCode, streetAddress, zipCode) { 
        
        USAddress.initialize(this, city, formatted, stateCode, streetAddress, zipCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, formatted, stateCode, streetAddress, zipCode) { 
        obj['city'] = city;
        obj['formatted'] = formatted;
        obj['state_code'] = stateCode;
        obj['street_address'] = streetAddress;
        obj['zip_code'] = zipCode;
    }

    /**
     * Constructs a <code>USAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GeoCodes/model/USAddress} obj Optional instance to populate.
     * @return {module:GeoCodes/model/USAddress} The populated <code>USAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USAddress();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
            if (data.hasOwnProperty('street_address')) {
                obj['street_address'] = USStreetAddress.constructFromObject(data['street_address']);
            }
            if (data.hasOwnProperty('zip_code')) {
                obj['zip_code'] = ZIPCode.constructFromObject(data['zip_code']);
            }
        }
        return obj;
    }

/**
     * Returns The city of the address.
     * @return {String}
     */
    getCity() {
        return this.city;
    }

    /**
     * Sets The city of the address.
     * @param {String} city The city of the address.
     */
    setCity(city) {
        this['city'] = city;
    }
/**
     * Returns A fully-formatted version of the address.
     * @return {String}
     */
    getFormatted() {
        return this.formatted;
    }

    /**
     * Sets A fully-formatted version of the address.
     * @param {String} formatted A fully-formatted version of the address.
     */
    setFormatted(formatted) {
        this['formatted'] = formatted;
    }
/**
     * Returns The 2-letter state code of the address. Note that in addition to the 50 states, you might also see 2 letter codes for American territories, or the District of Columbia.
     * @return {String}
     */
    getStateCode() {
        return this.state_code;
    }

    /**
     * Sets The 2-letter state code of the address. Note that in addition to the 50 states, you might also see 2 letter codes for American territories, or the District of Columbia.
     * @param {String} stateCode The 2-letter state code of the address. Note that in addition to the 50 states, you might also see 2 letter codes for American territories, or the District of Columbia.
     */
    setStateCode(stateCode) {
        this['state_code'] = stateCode;
    }
/**
     * @return {module:GeoCodes/model/USStreetAddress}
     */
    getStreetAddress() {
        return this.street_address;
    }

    /**
     * @param {module:GeoCodes/model/USStreetAddress} streetAddress
     */
    setStreetAddress(streetAddress) {
        this['street_address'] = streetAddress;
    }
/**
     * @return {module:GeoCodes/model/ZIPCode}
     */
    getZipCode() {
        return this.zip_code;
    }

    /**
     * @param {module:GeoCodes/model/ZIPCode} zipCode
     */
    setZipCode(zipCode) {
        this['zip_code'] = zipCode;
    }

}

/**
 * The city of the address.
 * @member {String} city
 */
USAddress.prototype['city'] = undefined;

/**
 * A fully-formatted version of the address.
 * @member {String} formatted
 */
USAddress.prototype['formatted'] = undefined;

/**
 * The 2-letter state code of the address. Note that in addition to the 50 states, you might also see 2 letter codes for American territories, or the District of Columbia.
 * @member {String} state_code
 */
USAddress.prototype['state_code'] = undefined;

/**
 * @member {module:GeoCodes/model/USStreetAddress} street_address
 */
USAddress.prototype['street_address'] = undefined;

/**
 * @member {module:GeoCodes/model/ZIPCode} zip_code
 */
USAddress.prototype['zip_code'] = undefined;






export default USAddress;

