/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import GCSCoordinate from './model/GCSCoordinate';
import Geocoding from './model/Geocoding';
import ReverseZIPCode from './model/ReverseZIPCode';
import USAddress from './model/USAddress';
import USStreetAddress from './model/USStreetAddress';
import ZIPCode from './model/ZIPCode';
import AddressApi from './api/AddressApi';
import AuthApi from './api/AuthApi';
import DefaultApi from './api/DefaultApi';
import GeocodeApi from './api/GeocodeApi';
import ZipCodeApi from './api/ZipCodeApi';


/**
* The_alpha_version_of_the__https__geo_codes_https__geo_codes_API_service__See_API_documentation__here_https__geo_codes_docs_api__10000_free_queries_per_month_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var GeoCodes = require('GeoCodes/index'); // See note below*.
* var xxxSvc = new GeoCodes.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new GeoCodes.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['GeoCodes/index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new GeoCodes.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new GeoCodes.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module GeoCodes/index
* @version 1.0.0-alpha
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:GeoCodes/ApiClient}
     */
    ApiClient,

    /**
     * The GCSCoordinate model constructor.
     * @property {module:GeoCodes/model/GCSCoordinate}
     */
    GCSCoordinate,

    /**
     * The Geocoding model constructor.
     * @property {module:GeoCodes/model/Geocoding}
     */
    Geocoding,

    /**
     * The ReverseZIPCode model constructor.
     * @property {module:GeoCodes/model/ReverseZIPCode}
     */
    ReverseZIPCode,

    /**
     * The USAddress model constructor.
     * @property {module:GeoCodes/model/USAddress}
     */
    USAddress,

    /**
     * The USStreetAddress model constructor.
     * @property {module:GeoCodes/model/USStreetAddress}
     */
    USStreetAddress,

    /**
     * The ZIPCode model constructor.
     * @property {module:GeoCodes/model/ZIPCode}
     */
    ZIPCode,

    /**
    * The AddressApi service constructor.
    * @property {module:GeoCodes/api/AddressApi}
    */
    AddressApi,

    /**
    * The AuthApi service constructor.
    * @property {module:GeoCodes/api/AuthApi}
    */
    AuthApi,

    /**
    * The DefaultApi service constructor.
    * @property {module:GeoCodes/api/DefaultApi}
    */
    DefaultApi,

    /**
    * The GeocodeApi service constructor.
    * @property {module:GeoCodes/api/GeocodeApi}
    */
    GeocodeApi,

    /**
    * The ZipCodeApi service constructor.
    * @property {module:GeoCodes/api/ZipCodeApi}
    */
    ZipCodeApi
};
