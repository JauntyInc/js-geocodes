/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReverseZIPCode from '../model/ReverseZIPCode';
import ZIPCode from '../model/ZIPCode';

/**
* ZipCode service.
* @module GeoCodes/api/ZipCodeApi
* @version 1.0.0-alpha
*/
export default class ZipCodeApi {

    /**
    * Constructs a new ZipCodeApi. 
    * @alias module:GeoCodes/api/ZipCodeApi
    * @class
    * @param {module:GeoCodes/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeoCodes/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Convert a coordinate to a ZIP Code
     * **Description**<br>  Look up a single ZIP Code from the given latitude and longitude.  This performs a lookup based on US Census \"ZIP Code Tabulation Areas.\" These areas are calculated by the US Census based on the most common ZIP Codes within different US Census blocks. This is necessary because in practice, ZIP Codes are not defined by areas but are defined as collections of addresses. They correspond loosely to areas, but not exactly. To get an accurate ZIP Code for an address, see the geocoding endpoints.  For more information on ZIP Code tabulation areas and why ZIP Codes cannot be accurately represented by areas, [click here](https://geo.codes/resources/articles/complete-guide-to-zip-codes#what-are-zip-code-tabulation-areas).  They have the following limitations: - ZIP Code Tabulation Areas do not have full coverage of the land mass of the United States. This only matters in remote areas without deliverable addresses; in practice this is fine. In these cases, the API will return the closest tabulation area unless the ` + \"`strict`\" + ` parameter is provided. - Addresses within a ZIP Code Tabulation Area might have different ZIP Codes. Geocoding an address is the only way to get a perfect ZIP Code. - The PlusFour field on the return value will always be empty.  **Lookup cost**<br>  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {Number} latitude The latitude of the query
     * @param {Number} longitude The longitude of the query
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.strict If true, will only return a result if the given point is within a zip code tabulation area, and will not return the closest one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:GeoCodes/model/ReverseZIPCode} and HTTP response
     */
    v1AddressReverseZipCodeWithHttpInfo(latitude, longitude, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling v1AddressReverseZipCode");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling v1AddressReverseZipCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude,
        'strict': opts['strict']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyURLAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReverseZIPCode;
      return this.apiClient.callApi(
        '/v1/address/reverse_zip_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Convert a coordinate to a ZIP Code
     * **Description**<br>  Look up a single ZIP Code from the given latitude and longitude.  This performs a lookup based on US Census \"ZIP Code Tabulation Areas.\" These areas are calculated by the US Census based on the most common ZIP Codes within different US Census blocks. This is necessary because in practice, ZIP Codes are not defined by areas but are defined as collections of addresses. They correspond loosely to areas, but not exactly. To get an accurate ZIP Code for an address, see the geocoding endpoints.  For more information on ZIP Code tabulation areas and why ZIP Codes cannot be accurately represented by areas, [click here](https://geo.codes/resources/articles/complete-guide-to-zip-codes#what-are-zip-code-tabulation-areas).  They have the following limitations: - ZIP Code Tabulation Areas do not have full coverage of the land mass of the United States. This only matters in remote areas without deliverable addresses; in practice this is fine. In these cases, the API will return the closest tabulation area unless the ` + \"`strict`\" + ` parameter is provided. - Addresses within a ZIP Code Tabulation Area might have different ZIP Codes. Geocoding an address is the only way to get a perfect ZIP Code. - The PlusFour field on the return value will always be empty.  **Lookup cost**<br>  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {Number} latitude The latitude of the query
     * @param {Number} longitude The longitude of the query
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.strict If true, will only return a result if the given point is within a zip code tabulation area, and will not return the closest one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:GeoCodes/model/ReverseZIPCode}
     */
    v1AddressReverseZipCode(latitude, longitude, opts) {
      return this.v1AddressReverseZipCodeWithHttpInfo(latitude, longitude, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Convert a ZIP Code to a coordinate
     * **Description**<br>  Convert a single ZIP Code into a latitude and longitude.  By default, this returns a point that is guaranteed to be interior to the given ZIP Code. It may not necessarily be the centroid, because the centroid of some ZIP Codes do not fall within their borders (imagine a ZIP Code that is shaped like a crescent).  If a Plus-4 ZIP code is passed, only the first 5 digits will be used (i.e. the +4 will be ignored).  This performs a lookup based on US Census \"ZIP Code Tabulation Areas.\" These areas are calculated by the US Census based on the most common ZIP Codes within different US Census blocks. This is necessary because in practice, ZIP Codes are not defined by areas but are defined as collections of addresses. They correspond loosely to areas, but not exactly. To get an accurate ZIP Code for an address, see the geocoding endpoints.  For more information on ZIP Code tabulation areas and why ZIP Codes cannot be accurately represented by areas, [click here](https://geo.codes/resources/articles/complete-guide-to-zip-codes#what-are-zip-code-tabulation-areas).
     * @param {String} zipCode The ZIP Code of the query. Can be a ZIP Code or a ZIP+4 Code. If a +4 extension is passed, it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:GeoCodes/model/ZIPCode} and HTTP response
     */
    v1AddressZipCodeWithHttpInfo(zipCode) {
      let postBody = null;
      // verify the required parameter 'zipCode' is set
      if (zipCode === undefined || zipCode === null) {
        throw new Error("Missing the required parameter 'zipCode' when calling v1AddressZipCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'zip_code': zipCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyURLAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZIPCode;
      return this.apiClient.callApi(
        '/v1/address/zip_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Convert a ZIP Code to a coordinate
     * **Description**<br>  Convert a single ZIP Code into a latitude and longitude.  By default, this returns a point that is guaranteed to be interior to the given ZIP Code. It may not necessarily be the centroid, because the centroid of some ZIP Codes do not fall within their borders (imagine a ZIP Code that is shaped like a crescent).  If a Plus-4 ZIP code is passed, only the first 5 digits will be used (i.e. the +4 will be ignored).  This performs a lookup based on US Census \"ZIP Code Tabulation Areas.\" These areas are calculated by the US Census based on the most common ZIP Codes within different US Census blocks. This is necessary because in practice, ZIP Codes are not defined by areas but are defined as collections of addresses. They correspond loosely to areas, but not exactly. To get an accurate ZIP Code for an address, see the geocoding endpoints.  For more information on ZIP Code tabulation areas and why ZIP Codes cannot be accurately represented by areas, [click here](https://geo.codes/resources/articles/complete-guide-to-zip-codes#what-are-zip-code-tabulation-areas).
     * @param {String} zipCode The ZIP Code of the query. Can be a ZIP Code or a ZIP+4 Code. If a +4 extension is passed, it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:GeoCodes/model/ZIPCode}
     */
    v1AddressZipCode(zipCode) {
      return this.v1AddressZipCodeWithHttpInfo(zipCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
