/**
 * geo.codes
 * The alpha version of the [https://geo.codes](https://geo.codes) API service. See API documentation [here](https://geo.codes/docs/api). 10,000 free queries per month.
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: help@geo.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Geocoding from '../model/Geocoding';

/**
* Address service.
* @module GeoCodes/api/AddressApi
* @version 1.0.0-alpha
*/
export default class AddressApi {

    /**
    * Constructs a new AddressApi. 
    * @alias module:GeoCodes/api/AddressApi
    * @class
    * @param {module:GeoCodes/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:GeoCodes/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Geocode an unstructured address string
     * **Description**<br><br>  Geocode a single address. This parses the input address and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30. 30 was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90 because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected.  **Lookup cost**  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {String} q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minConfidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:GeoCodes/model/Geocoding} and HTTP response
     */
    v1AddressGeocodeWithHttpInfo(q, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling v1AddressGeocode");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'min_confidence': opts['minConfidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyURLAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Geocoding;
      return this.apiClient.callApi(
        '/v1/address/geocode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Geocode an unstructured address string
     * **Description**<br><br>  Geocode a single address. This parses the input address and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30. 30 was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90 because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected.  **Lookup cost**  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {String} q The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minConfidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:GeoCodes/model/Geocoding}
     */
    v1AddressGeocode(q, opts) {
      return this.v1AddressGeocodeWithHttpInfo(q, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Geocode structured addresses
     * **Description**<br>  Geocode a single structured address. This takes address components (street, city, state, etc) and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30%. 30% was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90% because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected because they Just Work.  **Lookup cost**<br>  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {String} streetAddress The street address line, including the number and street type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.city The city. Not required, but it's highly recommended that you add either the city or postal_code fields.
     * @param {String} opts.state The state with the address. Not required, but it's highly recommended that you add the postal_code if the state is not present.
     * @param {String} opts.postalCode The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results.
     * @param {Number} opts.minConfidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:GeoCodes/model/Geocoding} and HTTP response
     */
    v1AddressStructuredGeocodeWithHttpInfo(streetAddress, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streetAddress' is set
      if (streetAddress === undefined || streetAddress === null) {
        throw new Error("Missing the required parameter 'streetAddress' when calling v1AddressStructuredGeocode");
      }

      let pathParams = {
      };
      let queryParams = {
        'street_address': streetAddress,
        'city': opts['city'],
        'state': opts['state'],
        'postal_code': opts['postalCode'],
        'min_confidence': opts['minConfidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyHeaderAuth', 'ApiKeyURLAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Geocoding;
      return this.apiClient.callApi(
        '/v1/address/structured_geocode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Geocode structured addresses
     * **Description**<br>  Geocode a single structured address. This takes address components (street, city, state, etc) and matches it against our records to produce the geocoded result.  This does a best-attempt to geocode the given address in the face of human errors in the input data. This can be the wrong city (\"New York City\" instead of \"New York\") a missing postal code, a misspelled street name, house numbers that don't exist, etc.  As more corrections are needed, the certainty in the result drops. This can be tuned with a minimum certainty parameter. If our confidence in the result is less than the minimum certainty, it will not be returned. The default is 30%. 30% was chosen to be robust against unclean data without returning results that are unlikely to be true. We don't recommend setting this parameter above 90% because exact matching is too restrictive for the mistakes that people typically make when writing addresses -- even people writing their own addresses will make mistakes that are never corrected because they Just Work.  **Lookup cost**<br>  This query requires an account. Please sign up at https://geo.codes/signup and get your API key at https://geo.codes/account/api  One query counts as one lookup. It only costs a query if it returns data. If you have exceeded your account quota, the request will not succeed.
     * @param {String} streetAddress The street address line, including the number and street type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.city The city. Not required, but it's highly recommended that you add either the city or postal_code fields.
     * @param {String} opts.state The state with the address. Not required, but it's highly recommended that you add the postal_code if the state is not present.
     * @param {String} opts.postalCode The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results.
     * @param {Number} opts.minConfidence The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:GeoCodes/model/Geocoding}
     */
    v1AddressStructuredGeocode(streetAddress, opts) {
      return this.v1AddressStructuredGeocodeWithHttpInfo(streetAddress, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
